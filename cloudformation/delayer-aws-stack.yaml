AWSTemplateFormatVersion: "2010-09-09"
Resources:
# IAM roles and policies ----------------------------------
  DelayerAWSGlobalRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "sqs.amazonaws.com"
                - "lambda.amazonaws.com"
                - "dynamodb.amazonaws.com"
                - "sns.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  DelayerAWSGlobalPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "delayer-aws-global-policy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:UpdateItem
          - dynamodb:GetRecords
          - dynamodb:GetShardIterator
          - dynamodb:DescribeStream
          - dynamodb:ListStreams
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - sns:Publish
          - sqs:SendMessage
          - sqs:DeleteMessage
          - sqs:ReceiveMessage
          Effect: Allow
          Resource: "*"
      Roles:
        -
          Ref: "DelayerAWSGlobalRole"

# Lambda functions ----------------------------------------
  APISchedulePost:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: api-schedule-post
      Handler: "index.handler"
      Role: !GetAtt DelayerAWSGlobalRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = (e,c,cb) => { cb(null); };
      Runtime: "nodejs6.10"
      Timeout: "20"
      MemorySize: 128

  Task1MinuteEnqueuer:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: task-1minute-enqueuer
      Handler: "index.handler"
      Role: !GetAtt DelayerAWSGlobalRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = (e,c,cb) => { cb(null); };
      Runtime: "nodejs6.10"
      Timeout: "300"
      MemorySize: 256

  Task1MinuteSqs2Sns:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: task-1minute-sqs2sns
      Handler: "index.handler"
      Role: !GetAtt DelayerAWSGlobalRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = (e,c,cb) => { cb(null); };
      Runtime: "nodejs6.10"
      Timeout: "300"
      MemorySize: 256

  StreamDynamoDBFastTrackEnqueuer:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: stream-dynamodb-fasttrack_enqueuer
      Handler: "index.handler"
      Role: !GetAtt DelayerAWSGlobalRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = (e,c,cb) => { cb(null); };
      Runtime: "nodejs6.10"
      Timeout: "60"
      MemorySize: 256

  SNSActionHTTPInvoker:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: sns-action-httpinvoker
      Handler: "index.handler"
      Role: !GetAtt DelayerAWSGlobalRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = (e,c,cb) => { cb(null); };
      Runtime: "nodejs6.10"
      Timeout: 5
      MemorySize: 128

# DynamoDB Table ------------------------------------------
  ScheduleTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "schedule"
      AttributeDefinitions:
        - AttributeName: "scheduleId"
          AttributeType: "S"
        - AttributeName: "pointInTime"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "scheduleId"
          KeyType: "HASH"
        - AttributeName: "pointInTime"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  EventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      EventSourceArn: !GetAtt ScheduleTable.StreamArn
      FunctionName: stream-dynamodb-fasttrack_enqueuer
      StartingPosition: "TRIM_HORIZON"

# SQS Queues ----------------------------------------------
  WaitQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: DELAYER_wait-queue
      ReceiveMessageWaitTimeSeconds: 3
      VisibilityTimeout: 10
      MessageRetentionPeriod: 3600

# SNS Topics ----------------------------------------------
  # Action topics
  HTTPActionTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: "DELAYER_ACTION_HTTP"
      DisplayName: HTTP Action executor topic

  HTTPActionTopicLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref HTTPActionTopic
      FunctionName: !GetAtt SNSActionHTTPInvoker.Arn

  LambdaHTTPActionToHTTPActionTopic:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt SNSActionHTTPInvoker.Arn
      Protocol: lambda
      TopicArn: !Ref HTTPActionTopic

# API Gateway ---------------------------------------------
  SchedulerAPI:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Description: delayer-aws REST API
      Name: scheduler-api

  ScheduleResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt SchedulerAPI.RootResourceId
      PathPart: schedule
      RestApiId: !Ref SchedulerAPI

  SchedulePostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref SchedulerAPI
      ResourceId: !Ref ScheduleResource
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      RequestValidatorId: !Ref RequestValidator
      RequestModels:
        "application/json": Schedule
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APISchedulePost.Arn}/invocations

  ScheduleCORSEnable:
      Type: "AWS::ApiGateway::Method"
      Properties:
        RestApiId: !Ref SchedulerAPI
        ResourceId: !Ref ScheduleResource
        AuthorizationType: NONE
        HttpMethod: OPTIONS
        Integration:
          Type: MOCK
          IntegrationResponses:
            - ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
              ResponseTemplates:
                application/json: ''
              StatusCode: '200'
          PassthroughBehavior: NEVER
          RequestTemplates:
            application/json: '{"statusCode": 200}'
        MethodResponses:
          - ResponseModels:
              application/json: Empty
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Origin: true
            StatusCode: '200'

  RequestValidator:
    Type: 'AWS::ApiGateway::RequestValidator'
    Properties:
      Name: ScheduleModelValidator
      RestApiId: !Ref SchedulerAPI
      ValidateRequestBody: true

  ScheduleModel:
    Type: "AWS::ApiGateway::Model"
    Properties:
      RestApiId: !Ref SchedulerAPI
      ContentType: "application/json"
      Description: Schema for Schedule record
      Name: Schedule
      Schema:
        id: "schemas/delayer-api/schedule"
        "$schema": "http://json-schema.org/draft-06/schema#"
        title: schedule
        type: object
        properties:
          schedule:
            type: object
            properties:
              pointInTime:
                $ref: "#/definitions/pointInTime"
            required:
              - pointInTime
            additionalProperties: false
          context:
            $ref: "#/definitions/context"
          action:
            type: object
            properties:
              type:
                enum:
                  - HTTP
                  - SQS_SEND
                  - SQS_RECEIVE
                  - SNS_SEND
              httpConfig:
                $ref: "#/definitions/httpConfig"
            additionalProperties: false
          notification:
            type: object
            properties:
              slack:
                $ref: "#/definitions/slackNotification"
              email:
                $ref: "#/definitions/emailNotification"
            anyOf:
              - required:
                - slack
              - required:
                - email
        required:
          - schedule
          - context
          - action
        additionalProperties: false
        definitions:
          pointInTime:
            type: string
            format: date-time
          context:
            type: object
            properties:
              headers:
                type: array
                items:
                  type: object
              payload:
                type: string
            additionalProperties: false
          httpConfig:
            type: object
            properties:
              method:
                $ref: "#/definitions/httpMethod"
              url:
                type: string
              requestType:
                enum:
                  - WAIT_RETURN
                  - FIRE_FORGET
              returnExpected:
                type: object
                properties:
                  code:
                    type: array
                    items:
                      type: number
                  body:
                    type: string
                required:
                  - code
              preCheck:
                type: object
                properties:
                  method:
                    $ref: "#/definitions/httpMethod"
                  url:
                    type: string
            additionalProperties: false
          httpMethod:
            enum:
              - GET
              - POST
              - PUT
              - PATCH
              - DELETE
              - HEAD
              - OPTIONS
          # Notificacoes ainda sao WIP
          slackNotification:
            properties:
              slack:
                type: object
                properties:
                  account:
                    type: string
                  recipients:
                    type: array
                    items:
                      type: string
                required:
                  - recipients
                additionalProperties: false
          emailNotification:
            properties:
              email:
                type: object
                properties:
                  recipients:
                    type: array
                    items:
                      type: string
                required:
                  - recipients
                additionalProperties: false

  APISchedulePostLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Join [ "", ["arn:aws:execute-api:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", !Ref SchedulerAPI, "/*/*/*" ] ]
      FunctionName: !GetAtt APISchedulePost.Arn

  Deployment:
    DependsOn: SchedulePostMethod
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref SchedulerAPI
      StageName: "DEFAULT"
