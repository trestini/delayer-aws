AWSTemplateFormatVersion: "2010-09-09"
Resources:
# IAM roles and policies ----------------------------------
  DelayerAWSGlobalRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "sqs.amazonaws.com"
                - "lambda.amazonaws.com"
                - "dynamodb.amazonaws.com"
                - "sns.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  DelayerAWSGlobalPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "delayer-aws-global-policy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:UpdateItem
          - dynamodb:GetRecords
          - dynamodb:GetShardIterator
          - dynamodb:DescribeStream
          - dynamodb:ListStreams
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - sns:Publish
          - sqs:SendMessage
          - sqs:DeleteMessage
          - sqs:ReceiveMessage
          Effect: Allow
          Resource: "*"
      Roles:
        -
          Ref: "DelayerAWSGlobalRole"

# Lambda functions ----------------------------------------
  APISchedulePost:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: api-schedule-post
      Handler: "index.handler"
      Role: !GetAtt DelayerAWSGlobalRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = (e,c,cb) => {
            const body = { message : "Backend application not yet deployed" };
            const ret = {
              statusCode: 503,
              headers: {"Content-Type": "application/json"},
              body: JSON.stringify(body)
            };
            console.log(body.message);
            cb(null, ret);
          };
      Runtime: "nodejs6.10"
      Timeout: "20"
      MemorySize: 128

  Task1MinuteEnqueuer:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: task-1minute-enqueuer
      Handler: "index.handler"
      Role: !GetAtt DelayerAWSGlobalRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = (e,c,cb) => {
            const msg = "Lambda function not yet deployed";
            console.log(msg);
            cb(msg);
          };
      Runtime: "nodejs6.10"
      Timeout: "300"
      MemorySize: 256

  Task1MinuteSqs2Sns:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: task-1minute-sqs2sns
      Handler: "index.handler"
      Role: !GetAtt DelayerAWSGlobalRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = (e,c,cb) => {
            const msg = "Lambda function not yet deployed";
            console.log(msg);
            cb(msg);
          };
      Runtime: "nodejs6.10"
      Timeout: "300"
      MemorySize: 256

  StreamDynamoDBFastTrackEnqueuer:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: stream-dynamodb-fasttrack_enqueuer
      Handler: "index.handler"
      Role: !GetAtt DelayerAWSGlobalRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = (e,c,cb) => {
            const msg = "Lambda function not yet deployed";
            console.log(msg);
            cb(msg);
          };
      Runtime: "nodejs6.10"
      Timeout: "60"
      MemorySize: 256

  SNSActionHTTPRequestLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: sns_action_http-request
      Handler: "index.handler"
      Role: !GetAtt DelayerAWSGlobalRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = (e,c,cb) => {
            const msg = "Lambda function not yet deployed";
            console.log(msg);
            cb(msg);
          };
      Runtime: "nodejs6.10"
      Timeout: 5
      MemorySize: 128

  SNSActionSQSSendLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: sns_action_sqs-send
      Handler: "index.handler"
      Role: !GetAtt DelayerAWSGlobalRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = (e,c,cb) => {
            const msg = "Lambda function not yet deployed";
            console.log(msg);
            cb(msg);
          };
      Runtime: "nodejs6.10"
      Timeout: 5
      MemorySize: 128

  SNSActionLambdaCallLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: sns_action_lambda-call
      Handler: "index.handler"
      Role: !GetAtt DelayerAWSGlobalRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = (e,c,cb) => {
            const msg = "Lambda function not yet deployed";
            console.log(msg);
            cb(msg);
          };
      Runtime: "nodejs6.10"
      Timeout: 5
      MemorySize: 128

# DynamoDB Table ------------------------------------------
  ScheduleTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "schedule"
      AttributeDefinitions:
        - AttributeName: "scheduleId"
          AttributeType: "S"
        - AttributeName: "pointInTime"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "scheduleId"
          KeyType: "HASH"
        - AttributeName: "pointInTime"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  EventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      EventSourceArn: !GetAtt ScheduleTable.StreamArn
      FunctionName: stream-dynamodb-fasttrack_enqueuer
      StartingPosition: "TRIM_HORIZON"

# SQS Queues ----------------------------------------------
  WaitQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: DELAYER_wait-queue
      ReceiveMessageWaitTimeSeconds: 3
      VisibilityTimeout: 10
      MessageRetentionPeriod: 3600

# SNS Topics ----------------------------------------------
  # Action topics
  # HTTP Action
  HTTPRequestActionTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: "http-request_action_topic"
      DisplayName: HTTP Request Action Topic

  HTTPRequestActionTopicLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref HTTPRequestActionTopic
      FunctionName: !GetAtt SNSActionHTTPRequestLambda.Arn

  HTTPRequestActionToHTTPRequestActionTopicSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt SNSActionHTTPRequestLambda.Arn
      Protocol: lambda
      TopicArn: !Ref HTTPRequestActionTopic
  # /HTTP Action

  # SQS Send
  SQSSendActionTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: "sqs-send_action_topic"
      DisplayName: SQS Send Action Topic

  SQSSendActionTopicLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref SQSSendActionTopic
      FunctionName: !GetAtt SNSActionSQSSendLambda.Arn

  SQSSendActionToHTTPRequestActionTopicSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt SNSActionSQSSendLambda.Arn
      Protocol: lambda
      TopicArn: !Ref SQSSendActionTopic
  # /SQS Send

  # Lambda Call
  LambdaCallActionTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: "lambda-call_action_topic"
      DisplayName: Lambda Call Action Topic

  LambdaCallActionTopicLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref LambdaCallActionTopic
      FunctionName: !GetAtt SNSActionLambdaCallLambda.Arn

  LambdaCallActionToHTTPRequestActionTopicSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt SNSActionLambdaCallLambda.Arn
      Protocol: lambda
      TopicArn: !Ref LambdaCallActionTopic
  # /Lambda Call

# API Gateway ---------------------------------------------
  SchedulerAPI:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Description: delayer-aws REST API
      Name: scheduler-api

  ScheduleResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt SchedulerAPI.RootResourceId
      PathPart: schedule
      RestApiId: !Ref SchedulerAPI

  SchedulePostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref SchedulerAPI
      ResourceId: !Ref ScheduleResource
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      RequestValidatorId: !Ref RequestValidator
      RequestModels:
        "application/json": Schedule
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APISchedulePost.Arn}/invocations

  ScheduleCORSEnable:
      Type: "AWS::ApiGateway::Method"
      Properties:
        RestApiId: !Ref SchedulerAPI
        ResourceId: !Ref ScheduleResource
        AuthorizationType: NONE
        HttpMethod: OPTIONS
        Integration:
          Type: MOCK
          IntegrationResponses:
            - ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
              ResponseTemplates:
                application/json: ''
              StatusCode: '200'
          PassthroughBehavior: NEVER
          RequestTemplates:
            application/json: '{"statusCode": 200}'
        MethodResponses:
          - ResponseModels:
              application/json: Empty
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Origin: true
            StatusCode: '200'

  RequestValidator:
    Type: 'AWS::ApiGateway::RequestValidator'
    Properties:
      Name: ScheduleModelValidator
      RestApiId: !Ref SchedulerAPI
      ValidateRequestBody: true

  ScheduleModel:
    Type: "AWS::ApiGateway::Model"
    Properties:
      RestApiId: !Ref SchedulerAPI
      ContentType: "application/json"
      Description: Schema for Schedule record
      Name: Schedule
      Schema:
        id: "schemas/delayer-api/api-validation"
        $schema: "http://json-schema.org/draft-06/schema#"
        title: api-validation
        type: object
        properties:
          schedule:
            type: object
            properties:
              pointInTime:
                type: string
                format: date-time
            required:
              - pointInTime
            additionalProperties: false
          context:
            type: object
            properties:
              headers:
                type: array
                items:
                  type: object
              payload:
                type: string
            additionalProperties: true
          action:
            type: object
            oneOf:
              -
                properties:
                  type:
                    enum:
                      - http-request
                  httpRequestConfig:
                    properties:
                      method:
                        enum:
                          - GET
                          - POST
                          - PUT
                          - PATCH
                          - DELETE
                          - HEAD
                          - OPTIONS
                      url:
                        type: string
                      requestType:
                        enum:
                          - WAIT_RETURN
                          - FIRE_FORGET
                    additionalProperties: false
                additionalProperties: false
              -
                properties:
                  type:
                    enum:
                      - sqs-send
                  sqsSendConfig:
                    type: object
                    properties:
                      queueName:
                        type: string
                      messageAttributes:
                        type: array
                        items:
                          type: object
                      payload:
                        type: string
                    required:
                      - queueName
                      - payload
                    additionalProperties: false
                additionalProperties: false
              -
                properties:
                  type:
                    enum:
                      - custom
                  customConfig:
                    type: object
                    properties:
                      configName:
                        type: string
                      topicArn:
                        type: string
                    required:
                      - configName
                      - topicArn
                    additionalProperties: true
                additionalProperties: false
        required:
          - schedule
          - context
          - action
        additionalProperties: false

  APISchedulePostLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Join [ "", ["arn:aws:execute-api:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", !Ref SchedulerAPI, "/*/*/*" ] ]
      FunctionName: !GetAtt APISchedulePost.Arn

  Deployment:
    DependsOn: SchedulePostMethod
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref SchedulerAPI
      StageName: "v1"

# Cloudwatch Tasks ----------------------------------------
  PermissionToInvokeTask1MinuteEnqueuer:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref Task1MinuteEnqueuer
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ScheduledRule"
          - "Arn"

  PermissionToInvokeTask1MinuteSQS2SNS:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref Task1MinuteSqs2Sns
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ScheduledRule"
          - "Arn"

  ScheduledRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: DelayerAWS_CWSchedulerRule
      Description: Scheduled Rule for lambda tasks
      ScheduleExpression: "rate(1 minute)"
      State: "DISABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "Task1MinuteEnqueuer"
              - "Arn"
          Id: "Task1MinuteEnqueuer"
        -
          Arn:
            Fn::GetAtt:
              - "Task1MinuteSqs2Sns"
              - "Arn"
          Id: "Task1MinuteSqs2Sns"
