AWSTemplateFormatVersion: "2010-09-09"
Resources:
# IAM roles and policies ----------------------------------
  DelayerAWSGlobalRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "sqs.amazonaws.com"
                - "lambda.amazonaws.com"
                - "dynamodb.amazonaws.com"
                - "sns.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  DelayerAWSGlobalPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "delayer-aws-global-policy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:UpdateItem
          - dynamodb:GetRecords
          - dynamodb:GetShardIterator
          - dynamodb:DescribeStream
          - dynamodb:ListStreams
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - sns:Publish
          - sqs:SendMessage
          - sqs:DeleteMessage
          - sqs:ReceiveMessage
          Effect: Allow
          Resource: "*"
      Roles:
        -
          Ref: "DelayerAWSGlobalRole"

# Lambda functions ----------------------------------------
  APISchedulePost:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: api-schedule-post
      Handler: "index.handler"
      Role: !GetAtt DelayerAWSGlobalRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = (e,c,cb) => { cb(null); };
      Runtime: "nodejs6.10"
      Timeout: "20"
      MemorySize: 128

  Task1MinuteEnqueuer:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: task-1minute-enqueuer
      Handler: "index.handler"
      Role: !GetAtt DelayerAWSGlobalRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = (e,c,cb) => { cb(null); };
      Runtime: "nodejs6.10"
      Timeout: "300"
      MemorySize: 256

  Task1MinuteSqs2Sns:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: task-1minute-sqs2sns
      Handler: "index.handler"
      Role: !GetAtt DelayerAWSGlobalRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = (e,c,cb) => { cb(null); };
      Runtime: "nodejs6.10"
      Timeout: "300"
      MemorySize: 256

  StreamDynamoDBFastTrackEnqueuer:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: stream-dynamodb-fasttrack_enqueuer
      Handler: "index.handler"
      Role: !GetAtt DelayerAWSGlobalRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = (e,c,cb) => { cb(null); };
      Runtime: "nodejs6.10"
      Timeout: "60"
      MemorySize: 256

  SNSActionHTTPLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: sns-action-http
      Handler: "index.handler"
      Role: !GetAtt DelayerAWSGlobalRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = (e,c,cb) => { cb(null); };
      Runtime: "nodejs6.10"
      Timeout: 5
      MemorySize: 128

# DynamoDB Table ------------------------------------------
  ScheduleTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "schedule"
      AttributeDefinitions:
        - AttributeName: "scheduleId"
          AttributeType: "S"
        - AttributeName: "pointInTime"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "scheduleId"
          KeyType: "HASH"
        - AttributeName: "pointInTime"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  EventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      EventSourceArn: !GetAtt ScheduleTable.StreamArn
      FunctionName: stream-dynamodb-fasttrack_enqueuer
      StartingPosition: "TRIM_HORIZON"

# SQS Queues ----------------------------------------------
  WaitQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: DELAYER_wait-queue
      ReceiveMessageWaitTimeSeconds: 3
      VisibilityTimeout: 10
      MessageRetentionPeriod: 3600

# SNS Topics ----------------------------------------------
  # Action topics
  HTTPActionTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: "DELAYER_ACTION_HTTP"
      DisplayName: HTTP Action executor topic

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref HTTPActionTopic
      FunctionName: !GetAtt SNSActionHTTPLambda.Arn

  LambdaHTTPActionToHTTPActionTopic:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt SNSActionHTTPLambda.Arn
      Protocol: lambda
      TopicArn: !Ref HTTPActionTopic
